---
title: "GitHub-3.5"
format: html
editor: visual
---

## **Reason 2: *branches* and *forks***

|                                                                                                                                 |
|------------------------------------------------------------------------|
| 原因2:将项目分割成多个分支应该是很容易的:可以独立处理的代码库副本。一段时间后，我们想要比较分支并将新添加的分支合并为一个分支。 |

你可能做过的一件事:在添加图片之前创建一个名为presentation-with-pictures.ppt的presentation.ppt副本，如果它不起作用，你可以回到昨天的备份。

这很好，但如果你的队友也制作了一份带有titlepage.ppt的演示文稿副本，并进行了修改，那该怎么办?在这种情况下，您已经并行创建了同一文件的两个分支，很难将这些更改合并回单个演示文稿(thisone -really.ppt)文件。

## **Reason 3: automation自动化**

原因3:Git是一个自动化平台，可以作为一种自动测试和审查变更、发布每周版本等等的机制。

程序员喜欢把事情自动化，而git允许各种自动化。一开始，这可能是令人生畏的，你需要多年的经验来学习所有可能的技巧。把“变魔术”作为职业的人被称为DevOps工程师。在开始使用GitHub时不要太担心这个问题，如果需要的话可以向其他人寻求帮助。

#### **Automatic testing自动化测试**

虽然我们不建议您立即学习git自动化，但是您在为开源项目做贡献时可能会遇到自动测试。稍后会详细介绍!

## **Our first contribution: *documentation***我们的第一个贡献:文档

今天是为开源项目做贡献的开始!对包做出重大贡献的最简单方法是对文档进行改进。在我们今天的例子中，我们将看一下ClimateMARGO包。一个气候经济模型。

这个包托管在GitHub上，这意味着所有代码和以前版本的代码都可以在github.com/ClimateMARGO/ClimateMARGO.jl上获得。作者还使用同一个GitHub站点来管理他们的待办事项——称为问题——并接受其他人的贡献——称为拉请求。今天，我们要做一个Pull Request!

### **What is a Pull Request?**什么是拉取请求?

Julia包是开源的，这意味着允许(也鼓励)您制作自己的源代码副本(我们称之为fork)并对其进行修改。

如果你在你的分支上做了一些好的改变，那么你可以通过提交你的代码作为Pull Request (PR)来建议对原始项目进行改变。这是GitHub内置的功能，也是大多数代码在线协作的方式。

### ***After*** **the Pull Request**拉取请求后

提交拉取请求是一种很棒的感觉，但这不是最后一步!在您提交后，PR将由项目作者进行审查，并留下他们的反馈。PR通常不会被直接合并(接受)，但会要求您进行一些小的更改。

这是可能的，因为拉取请求不是静态的-你可以在提交后对PR进行更改!记住PR是从一个分支到另一个分支。只需向from分支添加额外的提交，就可以对PR进行更改。

# **How to use GitHub怎么使用GitHub**

### 需求

要遵循这个介绍，您将需要:

-   在github.com上创建一个帐户。添加一个友好的个人资料图片!

-   对于Windows和MacOS用户，下载GitHub Desktop，这是一个图形化程序，可以轻松管理磁盘上的git存储库。Linux用户可以使用稍微高级一点的程序GitKraken。

-   代码编辑器。如果你还没有代码编辑器，或者你正在使用记事本、gedit或notepad++，我们强烈推荐VS code，一个开源的、初学者友好的编程环境。它可能看起来像一些新东西，很难学习，但它很容易使用，因为它理解您正在编写的代码，它将帮助您作为一个初学者程序员。

#### remote local

网上的版本，你可以在github.com上远程浏览。

你电脑上有什么?使用pull, commit和push来与远程同步。Google Drive一直都是这么做的。

#### fetch pull

让本地git知道在线上的任何更改。经常这样做!

将远程版本上的任何更改应用到本地副本。这将使两者同步。经常这样做!

#### commit push

创建文件更改的集合，准备推送。

将任何本地提交发布到远程版本。

## **Git trouble!**

你迟早会发现自己有麻烦。与Google Drive不同，同步可能需要人工干预，例如，git可能会说:

### **`merge conflict`**

这意味着有人在你提交之前修改了一个文件。

## **Fonsi's Git Trouble Fix™**

许多git问题都有一个“官方”的解决方案，学习所有这些技术需要时间。与此同时，这里是我解决许多棘手的git情况的简单方法:

### **Step 1**

使用GitHub Desktop来查找您更改的文件。这些变化重要吗?

### **Step 2**

把你想要保存的任何文件复制到另一个文件夹，比如你的桌面。

### **Step 3**

删除存储库的本地克隆，并将所有剩余文件移至回收站。

### **Step 4**

再次克隆存储库，并将文件复制回原始位置，覆盖克隆文件。

## **How to fork and contribute code**

### **Tests**

人们经常为他们的代码编写测试!作为代码库的一部分，将有一个测试文件夹，其中包含将导入项目并运行一些基本检查的脚本。

编写测试的一个原因是固定特定的行为，保护您以后不会意外地更改它。例如，如果您修复了double(2)返回40而不是4的错误，您还需要添加一个double(2) == 4的测试。几个月后，当您为另一个用例更改两倍时，旧的测试确保您不会意外地破坏曾经修复的东西。

#### **Running tests**

你可以通过打开Julia REPL来运行任何Julia包的测试，并输入:

如前所述，许多项目使用github魔术在每次更改时自动在服务器上运行测试，并且您可以在线查看测试结果。一个重要的应用程序正在为每个Pull Request运行测试。这意味着包作者可以快速地检查您的更改，知道它不会破坏任何东西。

# **Extra tips**

贡献不仅仅意味着贡献代码\!<https://opensource.guide/how-to-contribute/>

创建一个“测试”存储库!创建多个!

## 
