

==准备迭代回顾 Q&A==
两个月前，为北京Y企业做差距分析诊断，发现大量缺陷在系统测试才被发现，建议加强迭代回顾根因分析。质量经理便开始尝试内部推动，并在两周前做了一次团队回顾辅导。
===做好现场辅导===
质量经理：我们计划下周三就会与另一项目组做迭代回顾，他们团队共7-8人，2周前与另一团队使用便利贴做根因分析，确实能听到更多不同的声音。应如果准备好，让今次这团队能放开并做好根因分析？<br>
我：让我分享一下我的相关经验：<br>
{| class="wikitable"
|-
|如果他们没有学过根因分析，应先用15分钟介绍根因分析的主要元素（可用绅士俱乐部案例），然后立马请他们分两组，使用机场延误数据做45分钟互动练习。
（因利用数据，动脑筋，是最佳学习方式。因大家都坐过飞机，也遇过延误，应能理解机场的大概情况，所以不需要用实际团队缺陷数据。）

练习过程中，我只会定时提醒时间（需要在45分钟后跟管理层汇报），有时候在做练习时，学生会问我，”我做对不对啊？是否做错？“除非他们犯了基础错误（例如，用电脑打帕里托图，或只是按延误数据被一条按数字从最大排到最少等错误），我不会说你应该怎么做，尽量让团队自己讨论分析。团队都做完汇报以后，我才总结有哪些误解，那些做得好。
要做好回顾，准备很重要，例如要用大白纸，要有足够空间。如果团队成员都是围着一个大桌，坐下来讨论，不会有好结果。但反过来，如果我们在墙上贴上大白纸(1.5米 x 3米)，并提过大便利贴，大号、小号水笔，每个人有自己水笔写的时候，他们就会一直在走动，讨论，写字，画图，并不断交换位置，互相帮忙，这样就更能体现他们的团队意识更投入。

机场飞机延误练习有几个很重要的特点:
*真实的数据让团队可以按练习依据数据去分析根因，而不是纯粹头脑风暴，定性分析。
*有明确的任务目标（45分钟后给机场管理层汇报），给团队时间压力，团队便更有动力。只要任务明确，团队人员通常都有足够能力管理好自己分工，完成目标。

所以导师的任务不是教他一步一步怎么做，只要提醒时间，先定好目标，让他们团队自己发挥，自己讨论效果会更好。只要他们清楚需要做什么，大部分团队都能自己分好工，例如有些人画帕累托图，有些人做总体根因分析，或画鱼骨图，他们整个团队可能有五到八个人，我们作为导师就不需要帮他预先分工，他们自己会讨论自己会做好分工更好，尤其是已经是熟悉的、合作过的团队。
|}
质量经理：你的意思是要减少干预，尽量让团队自己动脑筋。但因未做过，可否再举些例子？<br>
我：不如我反过来，建议你作为导师应该避免说什么：
#其实你们团队我见到的其他团队好或者差（因这都是个人观点、感觉，非事实）
#本来只需要你们画帕累托图和鱼骨图，为什么你们还画了个脑图？
#你们都已经讨论了很多细节，要立马赶紧时间做最后总结
#你们讨论好像都只是针对机场闸口的问题，是否应该也考虑其他？

{| class="wikitable"
|-
|为什么要鼓励团队表达不同意见？
 
如果团队要改进，首先应让大家充分理解各成员的差异，充分讨论后大家便应能自己找出共通点，才有机会一起改进。
|}
如果大家可以在回顾时开放讨论,把自己的具体看法说出来,就可以让大家看到全貌，真正的情况。

所以内部教练尽量要鼓励不同的声音发出来,ASCH 1951“从众实验”证明,只要有一位战友,团队成员就愿意表达自己意见.所以内部顾问尽量要让每个人都有充分机会发声，越多不同的意见提出来,大家越能了解真正的情况，找出一个大家都赞同的改进方案。（详见附件：功能性分组帮助团队成长实例）

例如，如果发现团队一起开大会, 因人多，不愿意发言，可能要分成小组讨论，效果更好。

有些团队比较“慢热”，便需要给他们多点时间，不怕沉默，等一下.只要等到有第一个人开始发言,后面就好办理了。

===分析全过程===
质量经理：好的，你说我们上次做了回顾还没有找到真正根因，但不知道如何改善。<br>
我：可考虑分析流程。<br>
某家电力服务公司的内部软件开发团队，公司规定每两周固定日期发新版，因客户对软件质量要求很高，每次都必须通过一系列的评审和测试才可以发版。<br>
如果不能按发版时间完成项目交付，经理和团队会复盘整个过程，以识别在整个过程里哪些地方出现了失效点，然后针对失效点分析根因。所以除了模型，流程图也可以帮助分析过程并找出根因。画了流程图后，便可以利用FMEA方法针对每个失效点，找根因，和对应纠正措施。（详见附件“FMEA 实例”）

{| class="wikitable"
|-
|某家公司专门为电信供应商做客服管理软件系统，因客户对质量有要求，每次发布后都分析有哪些发版后的问题。有些软件开发相关问题不容易排查根因,例如某次发布后发现报表的数字对不上,但这些错误不是立马使用时就出现，开始的时候没问题但使用时间长了,就会产生错误。

团队花了很长时间分析整个过程，最终发现错误是由于有些内部接口，没有考虑到所有传输数据是否正常，有些有错但没拒收,导致开始时没问题,但累积多了就会出现最后的报表错误。最后也针对这问题改正了。

讨论分析如何能避免同类问题：

[[文件:微信截图_20230928135611.png|500px]]

如果按系统产品集成的流程,识别有那些点可避免问题发生（FMEA思路）。可以在集成测试时和系统测试时,增加类似的场景，加大类似的压力测试，应可预先暴露问题；集成测试时，如果都测试所有接口传输的数据，也可以避免问题；如果我们前面做好设计和代码的评审（根源与设计有关）,也应该可以避免。例如如果针对这种问题,完善评审检查单的检查项，以后应可避免同类问题再发生。
|}
所以从这实例可以看到针对技术问题,我们可以先画出从总体流程/路线图,每一个环节有什么风险,就可以更好的帮我们挖掘根因。

质量经理：你说我们上次缺乏具体量化目标，应如何改善？<br>
我：用水晶球预测模型可以帮团队制定缺陷范围目标：<br>

===团队第一轮回顾实例===

*团队分析迭代缺陷数据，缺陷是源自需求/设计/编码，得出以下分布表：
[[文件:微信截图_20220316093044.jpg]]

*按DRE公式，计算出各个过程的缺陷排除率
[[文件:2DreEstimateScreenshot 2021-12-01 212049.1.jpg]]<br>

*从团队工时表估算各过程的缺陷返工工作量
[[文件:4reworkByPhaseScreenshot 2021-12-01 214838.1.jpg|450px]]

*把缺陷排除率与返工工作量输入预测模型，得出每个过程的缺陷范围与质量成本,也验证了是系统测试缺陷率最高
[[文件:2AxtalBallPredictScreenshot 2021-12-01 212455.1.jpg|400px]]<br>

*团队针对评审排除率低（如需求/设计评审）针对大部分需求引起的缺陷都是因开发没有了解需求，可加强评审,例如先进行内部评审（团队内部），再进行外部评审，能提高需求与设计的缺陷排除率。把这新方法的预估排除率加进预测模型，然后使用模型比较各种方法，寻找那个搭配的返工工作量最低，模型能预测使用新方法后的各个过程缺陷范围与质量成本。

如果没有预测模型，我们只能主观估计百分比会降低，但有了预测模型，我们确实可以尝试改变参数，看能否估计缺陷分布的变化，也帮我们验证这假定是否可行。最终我们验证了确实这个百分比是可行。如果没有预测模型便难以做到。

例如，延续前面例子，下面看看团队如何基于练习2的数据，加入新方法/新参数，利用模型预估下一轮缺陷分布：

[[文件:微信截图_20211207132712.1.jpg]]

可看到大部分缺陷都前移，系统测试缺陷下降。

质量经理：做了第一轮迭代后，以后的迭代有什么要注意？<br>
我：团队累积了多轮迭代数据，便可以开始分析数据，并开始建立标杆：<br>

==建立团队标杆（基线）==
第一轮做模型估算，有些新方法的参数，例如需求评审排除率，都是随便预估出来。但第二轮迭代回顾时，便有实际的数据依据来调整缺陷排除率，更新模型预测参数，使下一轮的预估缺陷范围更能反应实际、更准确。当团队一直每轮都是用这个方式去完善后，就可以建立团队标杆作参考。

例如代码评审的缺陷率，从以往迭代数据可以得出上下限范围判断新一轮迭代的缺陷率是否超出范围。关于如何利用迭代的数据，用控制图判断是否稳定建立上下限范围，会在控制图（25章）里详细说明。

{| class="wikitable"
|-
|注意：上面我们是说缺陷率发现的缺陷数除以迭代的规模数，而不是说缺陷数，因为每次迭代的规模都不同，迭代的缺陷数是无法比较的，但是缺陷率就可以比较了。所以利用简化功能点估算规模是团队量化管理的基础。
|}

==从迭代复盘到持续改进==
回顾时做好复盘根因分析，利用数据，改善下一轮开发质量。 如何可以变成团队或公司的持续改进呢？
{| class="wikitable"
|-
|深圳有一家公司专门是做内部IT服务。因为要求很严格，都要经过测试验收都通过，才允许新版本正式投产（发版）。每两周会做一次发版，每次都会统计发版成功率，因为都做了很久，依据以往水平，要求发版成功率不会低于96%，并一直都监控这个百分比趋势。某一个月发现成功率跌到接近96%。质量改进组就开始启动根因分析。先看是哪个部门出问题引起发板率低。发现有两个部门表现最差，然后针对这两部门做根因分析找出具体原因。然后也对应一些原因做了纠正措施，比如培训评审等等，做以后发现确实那些问题解决了。发版率的水平也提升了，后面他反而可以把那个变成新的基线，变成一个新的水平。到了98%，

|}

从以上例子看到，按成功率，或缺陷率，从趋势，制定标杆，使用根因分析，针对根因采取纠正措施，质量提升，升到一个新的水平。

==结束语==
Kent BECK 先生的极限编程，快速迭代，每一轮交付对客户有价值的产出物，并得到客户反馈，而不是花精力写文档（如，设计文档）。如能做好每次迭代回顾，便可以持续改善（类似丰田方式）。

要推动公司团队做好迭代回顾，必须先获取高层的认同与支持。
{| class="wikitable"
|-
|某北京专注进入产品的公司的部门经理，听完我关于如果在迭代回顾时能做好根因分析，可以提高质量并提升生产率的故事，便
安排我给领导与有兴趣的团队做一个半小时的根因分析沙龙.我首先问三个问题：
#你们觉得占工作量最多的是哪一类工作?
#你们现在的缺陷绝大部分是在什么过程暴露?
#你们估计验收/系统测试缺陷的返工工作量是多少?

因为人数不少，现场有一百多人，线上千人，我请他们现场用手机扫描作答，用看板程序立马做统计汇总。

接下来，我就按“11 如何降低软件开发质量成本”讲，很多团队低估了缺陷返工所耗费的工时，导致大部分的工作量都用于修复后期验收/系统测试d的缺陷，软件开发的特性是缺陷越后期发现，返工工作量越高,如果每次迭代能把后面才发现的缺陷预先在前面发现并解决，不仅仅提高质量. 同时因减小后面的大量返工，同时也提高团队生产率。

这方法可以有效地在头15分钟让管理层/开发组长体会到针对缺陷前移做好根因分析的好处。
|}

这些重要的高层与组长都非常繁忙，用以上方法能有效并快速引起他们的兴趣。

有了管理者的关注与支持，要做好迭代回顾，必须所有团队成员都参与，并赋予团队充分时间分析、讨论改进行动。

要基于数据做好回顾分析，最困难不是数据分析，而是怎么收集到真实的数据。所以必须在培训里，让学员知道为什么要收集数据，为迭代收集数据做好准备。

如果希望干系人有执行改进行动的动力，必须要他们在回顾时全心投入参与讨论，一起找根本原因和解决方案。所以培训时，不仅仅是教分析的技巧，更需要多利用互动游戏让他们可以放心发表意见。避免迭代回顾时，项目经理‘一言堂’。

当数据不是单点而是分布时，蒙特卡罗预测模型可以帮我们更好处理数据。针对如何把发现缺陷前移，模型可以从每个过程的分布预估总返工工作量成本分布，也可以比较不同的搭配，自动挑选哪个搭配的总成本最低。

分析方法和可以改进的方向很多，这部分主要以一些实例带出每一个步骤的重点。大家掌握了这些节奏之后，就可以融会贯通，持续进行根本原因分析，形成不断优化的良性循环。以提升质量为目标，不再习惯于当前的缺陷水平，觉得大量缺陷在后期测试时被发现是正常。

请不要误以为这部分提到的方法，工具是做好团队回顾的唯一方法。因大部分团队都有这问题，缺陷相关数据也比较容易收集到，所以建议先从缺陷前移入手，容易快速看到效果。分析缺陷排除根因取得效果后，可以继续探索其他改进方向，例如除了硬数据（缺陷数，工作量等），也可分析软数据（团员的心情，部门间的合作性等）。方法、工具会不断有新的取代，利用数据，分析根因，希望避免同类问题再发生，持续改进这些原则才是做好迭代回顾的重点。

{| class="wikitable"
|-
|如何做好迭代回顾:总结

很多项目，大部分缺陷都是在后面客户验收或者系统测试才暴露,导致大量返工. 如果团队能在迭代回顾一起分析缺陷数据，就可以开始定量根因分析。

要做好根因分析,必需全部角色都参与.包括需求开发,测试、项目经理等,也需要大家能开放自己，发表真正的看法. 让大家都听到不同的看法后,才能更容易取得共识，找到大家都赞同的纠正措施。

团队有了以上基础,便可以利用水晶球预测模型,预估各过程的缺陷范围，从定性提升到定量.不需要等到客户验收才知道达不到预估效果。

要可持续,高层的支持很重要，所以要尽早与高层“算账” - 如果能在前面预先发现并排除缺陷，不仅提升质量，也节省成本。例如，团队本来没做单元测试，后面能做好单元测试应可以把系统测试或客户缺陷数减半。

|}

{| class="wikitable"
|-
|乔布斯，当NEXT CEO 时，被访问，谈质量：

整个质量提升的道理其实很简单，是一个重复的过程，然后我们需要不断去看，有哪些无效的环节要省略，哪部分要重新设计，不断试验、提升，就这么简单。重点是所有的提升都应该是科学化的，有数据而不是泛泛而谈。
|}


极限编程(XP)的最佳实践可帮我们发现现在的开发过程有那些不足，也有助找出具体根因和纠正措施，下一部分会探索里面的实践能如何帮助团队提升软件开发质量。


{| class="wikitable"
|-
|

=个人经验教训=
基于数据分析，做好每轮迭代回顾，持续改善，不仅仅能用于敏捷软件开发。

从2022年8月份与出版社签合同，按合同里规定年底交书稿，一直努力写。22年11月8日，离年底要交书的全部初稿给出版社时间不到两个月，书的内容也完成了超过一半，但剩下的时间因为年底密密麻麻很多评估，而且评估就是早上九点开始到下午五六点结束，只有中间一些空档时间和周末可以自由安排，所以我就用Humphrey先生的PSP思路来策划估算是否能在年底完成要求,第一步算出现在到年底可以用在写书的时间，按每周估计可用工时，估计到23.1.9 累积工时 = 167。第二步从历史的数据估算剩下的章节，每个章节需要多少小时，写出计划的完成顺序，然后依据原计划可以使用的每周时间，按最佳使用算出每个章节可以在哪周完成。我用三点估算，得出95%区间是 78.5 至 82.1。
初看好像时间挺充分，但当我开始每周用挣值分析法去监控进展，便立马发现原本的计划太理想了。例如，本来计划到第二周结束可以完成5个章节，但实际只完成了2章节（可用时间没有本来计划这么多；实际用于章节的工时比原本估计多）。。因离交稿期限很短，只好硬着头皮，看剩下多少章节，预估多少时间完成，填工时表，按进度偏差多少，我和2同事天天努力，一起于二月初完成。后面经过十几轮跟编辑的修定，到了春节整本书编辑完成，虽然与原计划有两个月延误，但觉得已经很不错。

春节后会大陆出差，在杭州看了两本书：Adler先生的经典"How to read a book" 关于怎么读书；“怎样讲好一个故事-哈佛非虚构写作课”怎么用故事打动读者的参考书，发现虽然章节都齐全，书的味道还是不对劲，大体都有现只算初稿，缺少吸引力。<br>

'''回顾'''：其中主要原因就是犯了敏捷开发针对的问题 - 用传统计划驱动的模式去做准备。几个月里一直只关注项目期限，怎样能在春节前完成，例如，从十一月份开始一直到春节，都只是自己埋头写，一直没有跟干系人沟通拿到他们的反馈，所以质量不好。

'''改进措施'''：从5月份开始改变策略，先依据那种写故事的方式按一部分完成，就打包发给30几位朋友圈要他写反馈，开始的时候，虽然有个别五六个人写了反馈但反应不多。后面我再依据敏捷的思路就做了一个问卷，让他们填，效果就好多了。比如我发了17个填后面有12个回复了。然后我按意见完善，并把回复各项打分汇总，一起发给朋友圈，让他们再提意见。当某部分几章初稿完成后，每周在CSDN发布一章，收集更多潜在读者的意见。

'''反思'''：这次经验教训让我亲身体验按计划做项目的弊端，与按迭代冲刺的优势：如果管理者只关注项目进度偏差，就会和我一样，团队不可能做出优秀作品；反过来，必须尽快获取干系人的反馈才能确保不走错路。

|}


=附件=
==FMEA 实例==
:(FMEA: Failure Mode Effects Analysis)
大家可能都遭遇过由于没有管理好时间，而导致迟到的情况.以坐飞机为例，从离开酒店到登上飞机的过程中，很可能因为一些风险导致最后没搭上飞机。<br>

你出发的时候，可能用不同的交通方式：出租车、机场大巴等。如果你不能在起飞前45分钟到达机场办理登机牌，你便搭不上飞机。但是你拿了登机牌也有可能最后搭不上，因为飞机都严格执行起飞前15分钟关舱门所以你拿了登机牌，还要在起飞前 15 分钟到达登机口。

Fig 1 登机过程
 
[[文件:风险与机会1.png]]

要赶上飞机其实是个过程，中间有很多环节会导致最后失败，所以我们可以通过FMEA过程分析来看如何减少失败的概率。

Fig 2 FMEA 例子

[[文件:风险与机会2 FMEA.png]]
 

Fig 3 打分参考
 
[[文件:风险与机会3 打分参考 1.png]]

以第一个失效为例：如发生便坐不上飞机，所以严重性是最高10。发生的概率还是比较高6。是否容易预防、预警。因不熟悉当地情况，加上我主要靠问酒店前台，有时候她也不清楚，所以我定6。
RPN = 10x6x6=360。

从以上登机的例子可以看出FMEA是以整个过程来管理风险，比如在出发前，就要查询一下各个交通工具要花费的时间，比如你发现在南京，从酒店坐地铁要转车，要花1个小时以上，如果时间太紧就来不及，宁可多花钱打车，才能控制风险。
当你拿了登机牌，还是要经过安检，还要从安检走过登机口。有时候机场很大，到达登机口也要花很长时间，就要先问好路径，提前计算好时间，才不会误点。<br>

过了安检到登机口要10分钟以上，就要在起飞前的35分钟完成通过安检，才来得及。这些都可以通过FMEA的形式把整个坐飞机的过程识别出来，找各个阶段会出现的问题，就知道如何控制。

以这坐飞机的风险为例，我自己就多次未赶上飞机，原因很多，但总结一下都是习惯没改过来。我应依据以往差点赶不上的经验，回顾一下，确保每一个过程都控制住，就不会后面再次出问题 ，这个和企业做风险管理概念一样。<br>
有度量才有管理。人和公司一样，很多做的事情好像是自己主动去想，其实很多都是潜意识习惯，如果你没有定一些量化的控制手段，就不会提高这方面风险意识，还是会搭不上飞机。我先回顾以往几次搭飞机的情况，并把每次到达机场的时间和到达闸口的时间写下（详见下面 Fig 4 ）<br>

Fig 4 上面是机场柜台关闭（45分钟）前到达时间，下面是关闸口前到达时间 （分钟）（  X 代表赶不上飞机）

[[文件:风险与机会4.png]]
 
最近一次赶不上飞机是因为未能在关闸门前到，之前已发生过两次 --- 我刚到闸口，就到时间马上关闸了 ! <br>
如果我把经验教训记下来，下次做好时间管理，就会避免后面的延误：有了数据，我们便可以更有效在回顾时做好根因分析 (CAR)。<br>

以这登记延误风险为例，可以使用FMEA分析每一失效点，例如过安检（因没有预留足够时间）与从安检到闸口太长时间等的发生概率都很高 （前者8， 后者 6）<br>

为了避免问题再发生，就要定一些具体的计划，最终希望把误点减到零。<br>

在登机这个环节，可利用什么有效方法/工具，帮助改善？ 

-	每次出发去机场前都查询各种交通方式的时间与风险（概率），预留足够时间，降低失效发生的概率<br>

-	拿了登记牌后，都计划好必须起飞前35分通过安检，45分前开始安检

在多次没登上飞机后，我发现平常的手表没有正负5分钟的概念，但是如果用电子手表，对时间的感觉可以准确到了正负1分钟，就能够更好把控时间。 

Fig 5 平常用于培训 / 评估计时的电子钟

[[文件:风险与机会5 闹钟.png]]


经过这次误机，我就买了个电子手表，取代传统针式手表，希望对日后不迟到有帮助。

'''效果'''： 这故事发生在2019.9 ，后面我按这些计划，一直都没有再出现赶不上飞机的情况，我每次都提醒自己必须在起飞前60 ~ 90分钟到机场，30 ~ 45分钟前到闸口。分析的目的是提高个人风险意识，避免问题发生。

==功能性分组帮助团队成长实例==
系统，包括团队、公司，的成长都依靠不断集合内部的差异，如果完全不能接受不同意见，就无法进步。基于心理学家 Yvonne Agazarian 系统中心理论 (Systems Centered Theory)，团队必须先从成见分组(Stereotype subgroup) 变为功能性分组(Functional Subgroup)，才能成长。

首先，要让大家觉得有共同点。基于这基础才可以听从不同意见。但首先要让大家愿意接受不同意见，不然的话就会变成争吵，不会有效果。
有人提出不同意见后，必须有人附和，成为他的战友，才能形成新的小组。有了新小组以后，团队需要把不同小组的立场合并起来，变成一个新方向、新思路，整个团队就有成长、进步。

{| class="wikitable"
|-
|<u>场景实例</u>：<br>
团队讨论如何完善社区里面的教育，大家讨论个人的希望。<br>
A：好像我们大家的想法都很类似。<br>
内部教练：可否举个例子？<br>
B：我们都想为自己和我们后代有个终身不断学习的机会。<br>
C：好像我们都没有人提过大学，不知道为什么。<br>
D：但很多人负担不起大学学费。 <br>
E：我觉得每个人只要想受到教育，都能做到，我就是靠自身努力。最后完成大学教育。<br>
F：（开始跟D形成小组）是的，但教育确实越来越昂贵， 我估计我们当中不少人负担不起那些美国东岸名校的昂贵学费。<br>
G：（有成见，觉得那些不能完成大学教育的都是没有动力，没有上进心）我还是觉得任何人，只要有动力都能做到。<br>

如果没有人附和E的观点，就可能变成他的个人独角戏。后面有两个可能的发展场景：<br>

<u>场景一</u>  C 附和了E 的观点。<br>

C：我的经历确实和E说的类似，辛辛苦苦最终完成了大学教育，但确实很艰苦。 如果我当时没有舅舅的支持，肯定完成不了。<br>

<u>场景二</u> 没有人附和 E 的说法。 <br>
内部教练：有没有其他人也有经过自己努力完成大学教育的经历？<br>
（注意：内部教练千万不能说：“有没有人赞同，人只要有动力都能进大学？”因为这只是个人观点，并非事实）<br>

A：我确实也完成了大学教育了，但也经历了很多困难。 <br>
G：我读了一年，因为再得不到奖学金，没有办法，只能退学。<br>

到了这个点，整个分组就比较复杂，虽然生成了新小组，
E得到一些回应，但也有些人提出不同的经验，需要有说法把新小组归纳。<br>

接下来，<br>
C：我看来这个很简单，有些人能完成大学教育。有些人虽然很希望完成，最终还是完成不了，但不是所有人都想或者必须完成大学教育。所以我们的改进任务应该是帮助所有人学到他希望学习的东西。<br>

有了以上C的说法，整个团队就可以进一步成长。<br>
|}

=参考 Reference=
1. WEISBORD, Marvin: FUTURE SEARCH: Getting the whole system in the Room for Vision, Commitment, and Action (2010 3/e) <br>
:::---===<<< END >>>===---
