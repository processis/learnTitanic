__NOTOC__
==案例背景==
香港公司在广州的离岸软件开发中心，专门为香港的客户，如政府部门，做软件维护工作。从2019年，项目已经开始采用 SCRUM 敏捷开发方式，每两周一个冲刺，他们每次做完迭代后，客户都会填写满意度调查，然后分析数据。
==迭代数据==
每次迭代团队都会收集以下数据：
*客户满意度调查（Cust Sat survey）
*需求变更请求次数（Requirements and Change Requests）
*系统测试缺陷数（Test defects）

==数据分析==
*Overall满意度（整体指标）与7~8个因素相关，而与其中的Deliverable Quality相关系数达到0.90，Deliverable Time 0.688左右,其他的相关性都较低。

[[文件:微信截图 20230625135709.png|600px|无]]

{| class="wikitable"
|-
|
|P1A
|-
|
|Sprint49,50
|Sprint51,52
|Sprint53,54
|Sprint55,56
|-
|Deliverable time交付时间
|4
|5
|4
|3.5
|-
|Deliverable quality交付质量
|3.5
|4.5
|4.5
|4
|-
|Overall satisfaction满意度
|4
|4.5
|4.5
|4


|}

*测试缺陷数和以下客户行为相关性如下：插入任务 0.51，需求模糊 0.66，初期没有需求问题 -0.45，需求不稳定引起返工 0.82。（详见下图）
（为什么初期需求模糊反而是-0.45：等需求明确，写成文档，导致后期才能给明确需求，反而比早期给个模糊需求好，因更可能引起返工。）

[[文件:微信截图 20230625135338.png|600px|无]]

{| class="wikitable"
|-
|
|Sprint中期改变任务内容或插入高优先级内容
|需求和设计在sprint初期很模糊，需要用较长时间引导客户落实
|需求和设计在sprint初期没能给出，需比较后期才能提供文档
|由于需求和设计不稳定引致的返工
|-
|sprint30
|1
|1
|1
|1
|-
|sprint31
|2
|0
|1
|0
|-
|sprint32
|4
|1
|1
|3
|-
|sprint33
|2
|2
|0
|3
|-
|sprint34
|4
|1
|1
|1
|-
|和测试缺陷的相关性
|0.5079
|0.6570
|0.4502
|0.8213
|}

若能写好需求，减少插入任务和变更，可以提升质量（降低测试缺陷数）。

==改进措施==
*固化Clarification流程。当前是较为随机，由开发人员发起（统计数据中每个迭代0~2次），后面优化Clarification 过程，要求每次迭代都必须做需求Clarification，形式也更正式，明确甲乙双方哪些岗位、什么角色必须参与，在确认新过程有效后，就把过程固化下来。
*把需求 Clarification 要具备的重点写成检查单，增加检查项，如：
**需求是否完整明确
**是否按简化功能点方法写清行为、实体
**场景是否明确
**能否有对应明确测试用例（是否可测试）
*请甲方尽量减少插入任务和变更。

==改进效果==
除了客户满意度得到提升外，冲刺生产率也提升，例如： <br>
生产率之前四分位数是 (1.07, 1.13, 1.16) ，采取控制插入任务，减少变更，做好Clarification等措施后，有明显改善，变为 (1.04, 1.05 , 1.08) 。 <br>
（注： 它们生产率 = 人天/功能点数 ， 所以生产率系数是越低越好）
